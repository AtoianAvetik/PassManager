
@function to-number($number) {
	@return $number / ($number * 0 + 1);
}

@function em($number){
	@return ($number / to-number($font-size-base) ) + em;
}

@function to-em($target, $context: $font-size-base) {
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}

@function calc-top($line-height-base, $font-size, $component-height) {
    @return (($line-height-base * $font-size) - $component-height) / 2; // vertical center of line-height
}

@function contrast-color($color, $dark: $contrasted-dark-default, $light: $contrasted-light-default, $threshold: null) {
    @if $threshold {
        // Deprecated in Compass 0.13
        @warn "The $threshold argment to contrast-color is no longer needed and will be removed in the next release.";
    }

    @if $color == null {
        @return null;
    } @else {
        $color-brightness: brightness($color);
        $dark-text-brightness: brightness($dark);
        $light-text-brightness: brightness($light);
        @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
    }
}

@function brightness($color) {
    @if type-of($color) == color {
        @return (red($color) * 0.299 + green($color) * 0.587 + blue($color) * 0.114) / 255 * 100%;
    } @else {
        @return unquote("brightness(#{$color})");
    }
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

    @if ($yiq >= $yiq-contrasted-threshold) {
        @return $dark;
    } @else {
        @return $light;
    }
}

// Retrieve color Sass maps
// usage: color("name_of_color", "type_of_color")
// to avoid to repeating map-get($colors-palettes, ...)
@function get-color-from-map($map, $key, $type) {
    @if map-has-key($map, $key) {
        @if type-of(map-get($map, $key)) == "map" {
            $curr_map: map-get($map, $key);
            @if map-has-key($curr_map, $type) {
                @return map-get($curr_map, $type);
            }
        }
        @else {
            @return map-get($map, $key);
        }
    }
    @return null;
}

@function color($key: "blue", $type: 'base') {
    @return get-color-from-map($colors-palettes, $key, $type);
}

@function theme-color($key: "primary", $type: 'base') {
    @return get-color-from-map($theme-colors-palettes, $key, $type);
}

@function gray($key: "100") {
    @return map-get($grays, $key);
}

@function color-level($color, $level: 0, $interval: 10%) {
    $color-base: if($level > 0, $black, $white);
    $level: abs($level);

    @return mix($color-base, $color, $level * $interval);
}

@function generate-color-map($key, $value) {
    @return (
        lighten-5:  color-level($value, -9),
        lighten-4:  color-level($value, -7),
        lighten-3:  color-level($value, -5),
        lighten-2:  color-level($value, -3),
        lighten-1:  color-level($value, -1.5),
        base:       $value,
        darken-1:   color-level($value, 0.6, 8%),
        darken-2:   color-level($value, 1.7, 8%),
        darken-3:   color-level($value, 2.8, 8%),
        darken-4:   color-level($value, 3.9, 8%),
    );
}

@function transform-map($map, $fn) {
    $result: null;

    @if type-of($map) == "map" and type-of(get-function($fn)) == "function" {
        $keys: map-keys($map);
        $map-transformed: ();

        @each $key, $value in $map {
            $map-transformed: map-merge(
                    $map-transformed,
                    ($key: call(get-function($fn), $key, $value))
            );
        }

        @if type-of($map-transformed) == "map"{
            $result: $map-transformed;
        } @else{
            @warn 'There was an error reversing the order of "#{$map}"';
        }
    } @else{
        @warn '"#{$map}" is not a valid map or "#{$fn}" is not a function';
    }

    @return $result;
}
