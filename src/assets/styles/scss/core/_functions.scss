
@function to-number($number) {
	@return $number / ($number * 0 + 1);
}

@function em($number){
	@return ($number / to-number($font-size-base) ) + em;
}

@function to-em($target, $context: $font-size-base) {
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}

@function calc-top($line-height-base, $font-size, $component-height) {
    @return (($line-height-base * $font-size) - $component-height) / 2; // vertical center of line-height
}


@function contrast-color($color, $dark: $contrasted-dark-default, $light: $contrasted-light-default, $threshold: null) {
    @if $threshold {
        // Deprecated in Compass 0.13
        @warn "The $threshold argment to contrast-color is no longer needed and will be removed in the next release.";
    }

    @if $color == null {
        @return null;
    } @else {
        $color-brightness: brightness($color);
        $dark-text-brightness: brightness($dark);
        $light-text-brightness: brightness($light);
        @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
    }
}

@function brightness($color) {
    @if type-of($color) == color {
        @return (red($color) * 0.299 + green($color) * 0.587 + blue($color) * 0.114) / 255 * 100%;
    } @else {
        @return unquote("brightness(#{$color})");
    }
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

    @if ($yiq >= $yiq-contrasted-threshold) {
        @return $dark;
    } @else {
        @return $light;
    }
}

// Retrieve color Sass maps
@function color($key: "blue") {
    @return map-get($colors, $key);
}

@function theme-color($key: "primary") {
    @return map-get($theme-colors, $key);
}

@function gray($key: "100") {
    @return map-get($grays, $key);
}

// usage: color("name_of_color", "type_of_color")
// to avoid to repeating map-get($colors-palette, ...)

@function color-function($color, $type: 'base') {
    @if map-has-key($colors-palette, $color) {
        $curr_color: map-get($colors-palette, $color);
        @if map-has-key($curr_color, $type) {
            @return map-get($curr_color, $type);
        }
    }
    @return null;
}

// Request a theme color level
@function theme-color-level($color-name: "primary", $level: 0) {
    $color: theme-color($color-name);
    $color-base: if($level > 0, $black, $white);
    $level: abs($level);

    @return mix($color-base, $color, $level * $theme-color-interval);
}
