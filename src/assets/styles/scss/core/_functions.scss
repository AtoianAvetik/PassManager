@function to-number($number) {
	@return $number / ($number * 0 + 1);
}

@function em($number){
	@return ($number / to-number($font-size-base) ) + em;
}

@function to-em($target, $context: $font-size-base) {
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}

@function to-rem($size, $base: $font-size-root) {
    @return $size / $base * 1rem;
}

@function calc-top($line-height-base, $font-size, $component-height) {
    @return (($line-height-base * $font-size) - $component-height) / 2; // vertical center of line-height
}

@function mapReverse ($map) {
    $result: null;

    @if type-of($map) == "map"{
        $keys: map-keys($map);
        $map-reversed: ();

        @for $i from length($keys) through 1{
            $map-reversed: map-merge(
                    $map-reversed,
                    (nth($keys, $i): map-get($map, nth($keys, $i)))
            );
        }

        @if type-of($map-reversed) == "map"{
            $result: $map-reversed;
        } @else{
            @warn 'There was an error reversing the order of "#{$map}"';
        }
    } @else{
        @warn '"#{$map}" is not a valid map';
    }

    @return $result;
}

@function transform-map($map, $fn) {
    $result: null;

    @if type-of($map) == "map" and type-of(get-function($fn)) == "function" {
        $keys: map-keys($map);
        $map-transformed: ();

        @each $key, $value in $map {
            $map-transformed: map-merge(
                    $map-transformed,
                    ($key: call(get-function($fn), $key, $value))
            );
        }

        @if type-of($map-transformed) == "map"{
            $result: $map-transformed;
        } @else{
            @warn 'There was an error reversing the order of "#{$map}"';
        }
    } @else{
        @warn '"#{$map}" is not a valid map or "#{$fn}" is not a function';
    }

    @return $result;
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}


/*--------------------------------------/
 Colors
--------------------------------------*/

@function brightness($color) {
    @if type-of($color) == color {
        @return (red($color) * 0.299 + green($color) * 0.587 + blue($color) * 0.114) / 255 * 100%;
    } @else {
        @return unquote("brightness(#{$color})");
    }
}

// Color contrast
@function yiq($color) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);

    @return (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
}
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light, $threshold: $yiq-contrasted-threshold) {
    $yiq: yiq($color);

    @if ($yiq >= $threshold) {
        @return $dark;
    } @else {
        @return $light;
    }
}

// Retrieve color Sass maps
// usage: color("name_of_color", "type_of_color")
// to avoid to repeating map-get($colors-palettes, ...)
@function get-from-map($map, $key, $type) {
    @if map-has-key($map, $key) {
        @if type-of(map-get($map, $key)) == "map" {
            $curr_map: map-get($map, $key);
            @if map-has-key($curr_map, $type) {
                @return map-get($curr_map, $type);
            }
        }
        @else {
            @return map-get($map, $key);
        }
    }
    @return null;
}

@function color($key: "blue", $type: 500) {
    @return get-from-map($colors-palettes, $key, $type);
}

@function theme-color($key: "primary", $type: 500) {
    @return get-from-map($theme-colors-palettes, $key, $type);
}

@function get-contrast($key: "blue", $type: 500) {
    $curr_map: get-from-map(map-merge($theme-colors-palettes, $colors-palettes), $key, contrast);
    @if map-has-key($curr_map, $type) {
        @return map-get($curr_map, $type);
    }
    @return null;
}

@function gray($key: "100") {
    @return map-get($grays, $key);
}

// Combination Functions
@function complement($color, $amount: 180) {
    $h: hue($color);
    $s: saturation($color);
    $l: lightness($color);
    @return hsl(($h + $amount) % 360, $s, $l);
}

@function color-level($color, $level: 0, $interval: 10%, $dark: $black, $light: $white) {
    $color-base: if($level > 0, $dark, $light);
    $level: abs($level);

    @return mix($color-base, $color, $level * $interval);
}

/*--------------------------------------/
 Utility functions
--------------------------------------*/
//
// Combine two rgb objects via Multiply
@function multiply($rgb1, $rgb2, $threshold: $multiply-threshold) {
    $r1: red($rgb1);
    $g1: green($rgb1);
    $b1: blue($rgb1);
    $r2: red($rgb2);
    $g2: green($rgb2);
    $b2: blue($rgb2);

    @return rgb(floor($r1 * $r2 / $threshold),floor($g1 * $g2 / $threshold),floor($b1 * $b2 / $threshold));
}

@function generate-color-palette($key, $value) {
    $base-accent: complement($value, 270);
    $base-dark: multiply($value, $value);
    $base-light: $white;

    $palette: (
       50:  color-level($value, -8.8, $light: $base-light),
       100:  color-level($value, -7, $light: $base-light),
       200:  color-level($value, -5, $light: $base-light),
       300:  color-level($value, -3, $light: $base-light),
       400:  color-level($value, -1.5, $light: $base-light),
       500:  $value,
       600:   color-level($value, 1.3, $dark: $base-dark),
       700:   color-level($value, 3, $dark: $base-dark),
       800:   color-level($value, 4.6, $dark: $base-dark),
       900:   color-level($value, 7.5, $dark: $base-dark),
       A100:   lighten(saturate(color-level($black, 8.5, $dark: $base-dark), 80), 65),
       A200:   lighten(saturate(color-level($black, 8.5, $dark: $base-dark), 80), 55),
       A400:   lighten(saturate(color-level($black, 8.5, $dark: $base-dark), 100), 45),
       A700:   lighten(saturate(color-level($black, 8.5, $dark: $base-dark), 100), 40),
    );
    $palette-contrast: ();
    @each $key, $value in $palette {
        $palette-contrast: map-merge(
                $palette-contrast,
                ($key: color-yiq($value))
        );
    }

    @return map-merge($palette, (contrast: $palette-contrast));
}
