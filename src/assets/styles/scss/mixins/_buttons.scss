// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%), $yiq-light-threshold: 240) {
    color: if(yiq($background) > $yiq-light-threshold, darken($background, 55%),color-yiq($background));
    @include gradient-bg($background);
    border-color: if(yiq($background) > $yiq-light-threshold, darken($border, 7.5%),$border);
    @include box-shadow($btn-box-shadow);

    @include hover {
        color: color-yiq($hover-background);
        @include gradient-bg($hover-background);
        border-color: $hover-border;
    }

    &:focus,
    &.focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        @if $enable-shadows {
            box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
        } @else {
            box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
        }
    }

    // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
        color: color-yiq($background);
        background-color: $background;
        border-color: $border;
        // Remove CSS gradients if they're enabled
        @if $enable-gradients {
            background-image: none;
        }
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: color-yiq($active-background);
        background-color: $active-background;
        @if $enable-gradients {
            background-image: none; // Remove the gradient for the pressed/active state
        }
        border-color: $active-border;

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            @if $enable-shadows and $btn-active-box-shadow != none {
                box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
            } @else {
                box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
            }
        }
    }
}

@mixin button-outline-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color, $yiq-light-threshold: 220) {
    color: if(yiq($color) > $yiq-light-threshold, darken($color, 55%),$color);
    border-color: if(yiq($color) > $yiq-light-threshold, darken($color, 7.5%),$color);

    @include hover {
        color: $color-hover;
        background-color: if(yiq($active-background) > $yiq-light-threshold, darken($color, 7.5%),$active-background);
        border-color: if(yiq($active-border) > $yiq-light-threshold, darken($color, 7.5%),$active-border);
    }

    &:focus,
    &.focus {
        box-shadow: 0 0 0 $btn-focus-width rgba(if(yiq($color) > $yiq-light-threshold, darken($color, 7.5%),$color), .5);
    }

    &.disabled,
    &:disabled {
        color: if(yiq($color) > $yiq-light-threshold, darken($color, 35%),$color);
        background-color: transparent;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: color-yiq($active-background);
        background-color: if(yiq($active-background) > $yiq-light-threshold, darken($color, 7.5%),$active-background);
        border-color: if(yiq($active-border) > $yiq-light-threshold, darken($color, 7.5%),$active-border);

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            @if $enable-shadows and $btn-active-box-shadow != none {
                box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(if(yiq($color) > $yiq-light-threshold, darken($color, 7.5%),$color), .5);
            } @else {
                box-shadow: 0 0 0 $btn-focus-width rgba(if(yiq($color) > $yiq-light-threshold, darken($color, 7.5%),$color), .5);
            }
        }
    }
}

// Button elevate
@mixin button-elevate-variant($color) {
    box-shadow: 0 5px 15px 0 rgba($color, 0.20);

    &:active,
    &:hover {
        box-shadow: 0 10px 15px 0 rgba($color,0.40) !important;
    }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
    padding: $padding-y $padding-x;
    @include font-size($font-size);
    line-height: $line-height;
    // Manually declare to provide an override to the browser default
    @include border-radius($border-radius, 0);
}

// Button font settings
@mixin button-font($font-size) {
    @include font-size($font-size);
}
@mixin button-transform($text-transform) {
    text-transform: $text-transform;
}

// Button icon only
@mixin button-icon-size($size, $font-size) {
    width: $size;
    height: $size;
    @include font-size($font-size);
}
